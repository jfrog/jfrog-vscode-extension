{
    "name": "jfrog-vscode-extension",
    "displayName": "JFrog",
    "description": "Security scanning for your Go, npm, Pypi, Maven and NuGet projects.",
    "version": "2.11.7",
    "license": "Apache-2.0",
    "icon": "resources/extensionIcon.png",
    "repository": {
        "type": "git",
        "url": "https://github.com/jfrog/jfrog-vscode-extension"
    },
    "homepage": "https://jfrog.github.io/jfrog-vscode-extension",
    "bugs": {
        "url": "https://github.com/jfrog/jfrog-vscode-extension/issues"
    },
    "publisher": "JFrog",
    "engines": {
        "vscode": "^1.80.0"
    },
    "categories": [
        "Other"
    ],
    "activationEvents": [
        "onStartupFinished"
    ],
    "main": "./dist/extension",
    "contributes": {
        "viewsWelcome": [
            {
                "view": "jfrog.issues",
                "contents": "Your project is ready to be scanned for security issues as described below.\nThe basic functionality includes Software Composition Analysis (SCA). We will scan your project dependencies for security issues and also show you enriched CVE data provided by the JFrog Security Research team.\n\nIf your JFrog subscription includes [Advanced DevSecOps](https://jfrog.com/xray/) enabled, we'll also run the following scans:\n\n[Vulnerability Contextual Analysis](https://github.com/jfrog/jfrog-vscode-extension#vulnerability-contextual-analysis) - This feature uses the code context to eliminate false positive reports on vulnerable dependencies that are not applicable to the code. Vulnerability Contextual Analysis is currently supported for Python, JavaScript and Java code.\n[SAST](https://github.com/jfrog/jfrog-vscode-extension#static-application-security-testing-sast) - Provides fast and accurate security-focused engines that detect zero-day security vulnerabilities on your source code sensitive operations, while minimizing false positives.\n[Secrets Detection](https://github.com/jfrog/jfrog-vscode-extension#secrets-detection) - Detect and prevent the inclusion of sensitive information, such as credentials and API keys, in your codebase.\n[Infrastructure as Code (IaC) scans](https://github.com/jfrog/jfrog-vscode-extension#infrastructure-as-code-iac-scan) - IaC files, such as Terraform, to identify security vulnerabilities and misconfigurations before deploying your cloud infrastructure. Get actionable insights and recommendations for securing your IaC configurations.",
                "when": "jfrog.connection.status == signedIn && jfrog.firstScanInWorkspace"
            },
            {
                "view": "jfrog.issues",
                "contents": "Your project was scanned and we didn't find any security issues.\n[Rescan](command:jfrog.scan.refresh)",
                "when": "jfrog.connection.status == signedIn && !jfrog.firstScanInWorkspace"
            },
            {
                "view": "jfrog.issues",
                "contents": "Couldn't connect to your JFrog Platform. \n[Reconnect](command:jfrog.xray.reConnect) \n [Reset your connection details](command:jfrog.xray.resetConnection)",
                "when": "jfrog.connection.status == connectionLost"
            }
        ],
        "viewsContainers": {
            "activitybar": [
                {
                    "id": "jfrog",
                    "title": "JFrog",
                    "icon": "resources/extensionIcon.png"
                }
            ]
        },
        "views": {
            "jfrog": [
                {
                    "id": "jfrog.view.ci.issues",
                    "name": "CI",
                    "when": "jfrog.view.type == Ci"
                },
                {
                    "id": "jfrog.view.ci.issues.details",
                    "name": "Details",
                    "when": "jfrog.view.type == Ci"
                },
                {
                    "id": "jfrog.issues",
                    "name": "Issues",
                    "when": "jfrog.view.type == Local"
                },
                {
                    "id": "jfrog.webview.sidebar",
                    "type": "webview",
                    "name": "Sign in",
                    "when": "jfrog.view.type == Login"
                }
            ]
        },
        "configuration": {
            "title": "JFrog",
            "properties": {
                "jfrog.useSpecificScannersVersion": {
                    "type": "string",
                    "scope": "application",
                    "pattern": "^$|^\\d+\\.\\d+\\.\\d+$",
                    "markdownDescription": "Specifies the JFrog Scanners version to use. (format X.X.X). By default the latest stable scanners version is used."
                },
                "jfrog.customRulesPath": {
                    "type": "string",
                    "scope": "resource",
                    "markdownDescription": "Absolute Path to a local custom rules file. The file should be in JSON format and contain the additional custom rules to be applied during the scan."
                },
                "jfrog.xray.exclusions": {
                    "type": "string",
                    "default": "**/*{.git,test,venv,node_modules,target}*",
                    "scope": "resource",
                    "pattern": "^\\*\\*/\\*\\{([^{},]+(,[^{},]+)*)\\}\\*$",
                    "markdownDescription": "A [glob pattern](https://code.visualstudio.com/api/references/vscode-api#GlobPattern) used to exclude specific paths from being scanned by JFrog Xray. For example, go.mod files under directories named testdata will not be scanned."
                },
                "jfrog.view.ciIntegration.buildNamePattern": {
                    "type": "string",
                    "scope": "resource",
                    "markdownDescription": "A wildcards pattern, to match the name of builds published to Artifactory. Only builds which match the pattern are visible under the CI tab."
                },
                "jfrog.excludeDevDependencies": {
                    "type": "boolean",
                    "scope": "application",
                    "markdownDescription": "Exclude development dependencies during the scan. Currently, only npm is supported."
                },
                "jfrog.externalResourcesRepository": {
                    "type": "string",
                    "scope": "application",
                    "markdownDescription": "By default, the JFrog extension downloads the necessary tools needed from https://releases.jfrog.io. If the machine that runs JFrog extension has no access to it, you can create a remote repository in Artifactory which proxy https://releases.jfrog.io and set it name here. The JFrog extension will download the tools from the remote repository."
                },
                "jfrog.projectKey": {
                    "type": "string",
                    "scope": "application",
                    "markdownDescription": "Optionally use the Project Key field to allow the security and license compliance information displayed in VS-Code, to reflect the security policies required by your organization. This is done as follows:\n\nCreate a [JFrog Project](https://www.jfrog.com/confluence/display/JFROG/Projects), or obtain the relevant JFrog Project key.\n\nCreate a [Policy](https://www.jfrog.com/confluence/display/JFROG/Creating+Xray+Policies+and+Rules) on JFrog Xray.\n\nCreate a [Watch](https://www.jfrog.com/confluence/display/JFROG/Configuring+Xray+Watches) on JFrog Xray and assign your Policy and Project as resources to it."
                },
                "jfrog.watches": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "scope": "application",
                    "markdownDescription": "Add one or more Xray Watches, to reflect the security policies required by your organization.\n\nIf both “Project Key” and “Watches” are configured, VS Code will use the configured Watches, and not the Project Key to determine the policy for the security scanning."
                },
                "jfrog.reportAnalytics": {
                    "type": "boolean",
                    "default": true,
                    "scope": "application",
                    "markdownDescription": "Help us improve the JFrog extension by sending analytic data and errors to JFrog."
                },
                "jfrog.showAdvanceScanLog": {
                    "type": "boolean",
                    "default": false,
                    "scope": "application",
                    "markdownDescription": "Show the detailed advance scan logs at debug level."
                },
                "jfrog.logLevel": {
                    "type": "string",
                    "default": "info",
                    "enum": [
                        "debug",
                        "info",
                        "warn",
                        "err"
                    ],
                    "scope": "application",
                    "markdownDescription": "The logging level the extension logs at, defaults to 'info'"
                },
                "jfrog.connectionRetries": {
                    "type": "number",
                    "default": 3,
                    "scope": "application",
                    "markdownDescription": "Maximum connection retry attempts"
                },
                "jfrog.connectionTimeout": {
                    "type": "number",
                    "default": 60,
                    "scope": "application",
                    "markdownDescription": "Timeout period before the connection is terminated in seconds"
                }
            }
        },
        "commands": [
            {
                "command": "jfrog.open.settings",
                "title": "Open extension settings",
                "icon": "$(extensions-manage)",
                "category": "JFrog"
            },
            {
                "command": "jfrog.open.feedback",
                "title": "Send us feedback",
                "icon": "$(feedback)",
                "category": "JFrog"
            },
            {
                "command": "jfrog.scan.refresh",
                "title": "Refresh",
                "icon": {
                    "light": "resources/light/refresh.png",
                    "dark": "resources/dark/refresh.png"
                },
                "category": "JFrog",
                "enablement": "jfrog.connection.status == signedIn && !jfrog.scanInProgress"
            },
            {
                "command": "jfrog.xray.disconnect",
                "title": "Disconnect",
                "icon": "$(debug-disconnect)",
                "category": "JFrog",
                "enablement": "!jfrog.scanInProgress"
            },
            {
                "command": "jfrog.xray.filter",
                "title": "Filter",
                "icon": {
                    "light": "resources/light/filter.png",
                    "dark": "resources/dark/filter.png"
                },
                "category": "JFrog",
                "enablement": "jfrog.connection.status == signedIn && !jfrog.scanInProgress"
            },
            {
                "command": "jfrog.issues.open.ignore",
                "title": "Add ignore rule",
                "icon": "$(eye-closed)",
                "enablement": "viewItem =~ /jfrog.issues.open.ignore.enabled/"
            },
            {
                "command": "jfrog.xray.copyToClipboard",
                "title": "Copy",
                "enablement": "viewItem =~ /jfrog.item.copy.to.clipboard/"
            },
            {
                "command": "jfrog.issues.cache.delete",
                "title": "Delete cache",
                "category": "JFrog"
            },
            {
                "command": "jfrog.xray.builds",
                "title": "Select build to display",
                "icon": {
                    "light": "resources/light/build.png",
                    "dark": "resources/dark/build.png"
                },
                "category": "JFrog",
                "enablement": "isCi"
            },
            {
                "command": "jfrog.view.local",
                "title": "Switch to local mode",
                "icon": "$(home)",
                "category": "JFrog",
                "enablement": "!jfrog.scanInProgress && jfrog.view.type == Ci"
            },
            {
                "command": "jfrog.view.ci",
                "title": "Switch to CI mode",
                "icon": {
                    "light": "resources/light/ci.png",
                    "dark": "resources/dark/ci.png"
                },
                "category": "JFrog",
                "enablement": "!jfrog.scanInProgress && jfrog.view.type == Local"
            }
        ],
        "menus": {
            "view/title": [
                {
                    "command": "jfrog.xray.disconnect",
                    "when": "jfrog.connection.status == signedIn && view =~ /^jfrog.issues$|^jfrog.view.ci.issues$/",
                    "group": "navigation@0"
                },
                {
                    "command": "jfrog.scan.refresh",
                    "when": "view == jfrog.view.ci.issues || view == jfrog.issues",
                    "group": "navigation@1"
                },
                {
                    "command": "jfrog.xray.filter",
                    "when": "view == jfrog.view.ci.issues",
                    "group": "navigation@2"
                },
                {
                    "command": "jfrog.view.local",
                    "when": "view == jfrog.view.ci.issues",
                    "group": "navigation@3"
                },
                {
                    "command": "jfrog.view.ci",
                    "when": "view == jfrog.issues",
                    "group": "navigation@3"
                },
                {
                    "command": "jfrog.xray.builds",
                    "when": "view == jfrog.view.ci.issues",
                    "group": "navigation@4"
                },
                {
                    "command": "jfrog.open.settings",
                    "when": "view == jfrog.view.ci.issues || view == jfrog.issues",
                    "group": "navigation@5"
                },
                {
                    "command": "jfrog.open.feedback",
                    "when": "view == jfrog.view.ci.issues || view == jfrog.issues",
                    "group": "navigation@6"
                }
            ],
            "view/item/context": [
                {
                    "command": "jfrog.issues.open.ignore",
                    "when": "viewItem =~ /jfrog.issues.open.ignore.enabled/",
                    "group": "inline"
                },
                {
                    "command": "jfrog.xray.copyToClipboard",
                    "when": "viewItem =~ /jfrog.item.copy.to.clipboard/"
                }
            ]
        },
        "jsonValidation": [
            {
                "fileMatch": [
                    "**/filespecs/*.json",
                    "*filespec*.json",
                    "*.filespec"
                ],
                "url": "https://github.com/jfrog/jfrog-cli/raw/v2/schema/filespec-schema.json"
            }
        ]
    },
    "scripts": {
        "vscode:prepublish": "rm -rf dist && webpack --mode production && cp -r node_modules/jfrog-ide-webview/build dist/jfrog-ide-webview",
        "webpack": "rm -rf dist && webpack --mode development && cp -r node_modules/jfrog-ide-webview/build dist/jfrog-ide-webview",
        "format": "prettier --write \"src/**/*.ts\" \"package.json\" \"tsconfig.json\" \".eslintrc.js\"",
        "compile": "tsc -p ./",
        "watch": "tsc -watch -p ./",
        "lint": "eslint -c .eslintrc.js --ext .ts src",
        "pretest": "npm run compile",
        "test": "node ./out/test/runTest.js",
        "package": "vsce package"
    },
    "dependencies": {
        "adm-zip": "~0.5.9",
        "fs-extra": "~10.1.0",
        "jfrog-client-js": "^2.8.0",
        "jfrog-ide-webview": "https://releases.jfrog.io/artifactory/ide-webview-npm/jfrog-ide-webview/-/jfrog-ide-webview-0.2.14.tgz",
        "js-yaml": "^4.1.0",
        "json2csv": "~5.0.7",
        "nuget-deps-tree": "^0.3.1",
        "original-fs": "~1.1.0",
        "p-queue": "~6.6.2",
        "retries": "~1.0.0",
        "semver": "^7.5.4",
        "typescript-collections": "~1.3.3",
        "walkdir": "~0.4.1",
        "xmlbuilder2": "~3.1.1"
    },
    "devDependencies": {
        "@faker-js/faker": "^7.1.0",
        "@types/adm-zip": "^0.5.0",
        "@types/chai": "^4.3.1",
        "@types/fs-extra": "^9.0.13",
        "@types/glob": "^7.2.0",
        "@types/js-yaml": "^4.0.5",
        "@types/json2csv": "^5.0.3",
        "@types/mocha": "^9.1.1",
        "@types/semver": "^7.3.9",
        "@types/sinon": "^10.0.15",
        "@types/tmp": "^0.2.3",
        "@types/vscode": "1.64.0",
        "@typescript-eslint/eslint-plugin": "^5.27.0",
        "@typescript-eslint/parser": "^5.27.0",
        "@vscode/vsce": "^2.21.0",
        "chai": "^4.3.6",
        "eslint": "^8.16.0",
        "eslint-config-prettier": "^8.5.0",
        "glob": "^8.0.3",
        "mocha": "^10.0.0",
        "nock": "^13.2.7",
        "ovsx": "^0.8.3",
        "prettier": "^1.19.1",
        "sinon": "^15.2.0",
        "tmp": "^0.2.1",
        "ts-loader": "^9.3.0",
        "typescript": "^4.7.2",
        "vscode-test": "^1.6.1",
        "webpack": "^5.76.0",
        "webpack-cli": "^4.9.2"
    },
    "keywords": [
        "go",
        "js",
        "ts",
        "npm",
        "scan",
        ".net",
        "xray",
        "jfrog",
        "maven",
        "nuget",
        "devops",
        "golang",
        "nodejs",
        "python",
        "dotnet",
        "security",
        "devsecops",
        "javascript",
        "typescript",
        "artifactory",
        "vulnerabilities"
    ]
}
